##########################################################################
#
# WARNING: This file was generated by update.php.
#
# You can find the relevant template in the `/templates` folder.
#
name: Build test images

on:
  pull_request:

env:
  REGISTRY_USERNAME: desrosj
  REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  PACKAGE_REGISTRY_HOST: ghcr.io
  PACKAGE_REGISTRY: ghcr.io/wordpress/wpdev-docker-images
  PR_TAG: -${{ github.event.number }}


jobs:
  # Checks for any incomplete preceding workflow runs and cancels them.
  check-for-duplicates:
    name: Cancel duplicate workflow runs
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs of this workflow (pull requests only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  build-php-images:
    name: PHP ${{ matrix.php }} Image
    runs-on: ubuntu-latest
    needs: check-for-duplicates
    strategy:
      matrix:
        php: [ '5.2', '5.3', '5.4', '5.5', '5.6.20', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0' ]
    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '7.4'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/php

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG

      - name: Push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/php:latest$PR_TAG
          docker images
          docker push $PACKAGE_REGISTRY/php:latest$PR_TAG

  build-phpunit-images:
    name: PHPUnit on PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        php: [ '5.2', '5.3', '5.4', '5.5', '5.6.20', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0' ]

    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '7.4'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/phpunit

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG

      - name: Tag and push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/phpunit:latest$PR_TAG
          docker push $PACKAGE_REGISTRY/phpunit:latest$PR_TAG

  build-specific-phpunit-images:
    name: PHPUnit ${{ matrix.phpunit }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        phpunit: [ '5-php-5.6.20', '4-php-5.6.20', '5-php-5.6', '4-php-5.6', '7-php-7.0', '6-php-7.0', '5-php-7.0', '7-php-7.1', '6-php-7.1', '8-php-7.2', '7-php-7.2', '6-php-7.2', '9-php-7.3', '8-php-7.3', '7-php-7.3', '6-php-7.3', '9-php-7.4', '8-php-7.4', '7-php-7.4', '9-php-8.0' ]

    env:
      PHPUNIT_VERSION: ${{ matrix.phpunit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/phpunit:$PHPUNIT_VERSION-fpm$PR_TAG images/phpunit/$PHPUNIT_VERSION

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/phpunit:$PHPUNIT_VERSION-fpm$PR_TAG

  build-cli-images:
    name: CLI on PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        php: [ '5.2', '5.3', '5.4', '5.5', '5.6.20', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0' ]

    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '7.4'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/cli

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG

      - name: Push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/cli:latest$PR_TAG
          docker push $PACKAGE_REGISTRY/cli:latest$PR_TAG
