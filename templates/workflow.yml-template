%%GENERATED_WARNING%%
%%DOCKER_HUB%%
name: Build and publish images to Docker Hub

on:
  push:
    branches: master
  # Once weekly On Sundays at 00:00 UTC.
  schedule:
    - cron: '0 0 * * 0'

env:
  REGISTRY_USERNAME: garypendergast
  REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  PACKAGE_REGISTRY_HOST:
  PACKAGE_REGISTRY: wordpressdevelop
  PR_TAG:
%%/DOCKER_HUB%%
%%GITHUB%%
name: Build test images

on:
  pull_request:

env:
  REGISTRY_USERNAME: desrosj
  REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  PACKAGE_REGISTRY_HOST: ghcr.io
  PACKAGE_REGISTRY: ghcr.io/wordpress/wpdev-docker-images
  PR_TAG: -${{ github.event.number }}
%%/GITHUB%%

jobs:
  # Checks for any incomplete preceding workflow runs and cancels them.
  check-for-duplicates:
    name: Cancel duplicate workflow runs
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs of this workflow (pull requests only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  build-php-images:
    name: PHP ${{ matrix.php }} Image
    runs-on: ubuntu-latest
    needs: check-for-duplicates
    strategy:
      matrix:
        php: [ %%PHP_VERSION_LIST%% ]
    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '%%PHP_LATEST%%'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/php

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG

      - name: Push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/php:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/php:latest$PR_TAG
          docker images
          docker push $PACKAGE_REGISTRY/php:latest$PR_TAG

  build-phpunit-images:
    name: PHPUnit on PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        php: [ %%PHP_VERSION_LIST%% ]

    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '%%PHP_LATEST%%'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/phpunit

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG

      - name: Tag and push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/phpunit:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/phpunit:latest$PR_TAG
          docker push $PACKAGE_REGISTRY/phpunit:latest$PR_TAG

  build-specific-phpunit-images:
    name: PHPUnit ${{ matrix.phpunit }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        phpunit: [ %%PHPUNIT_COMBINATIONS%% ]

    env:
      PHPUNIT_VERSION: ${{ matrix.phpunit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/phpunit:$PHPUNIT_VERSION-fpm$PR_TAG images/phpunit/$PHPUNIT_VERSION

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/phpunit:$PHPUNIT_VERSION-fpm$PR_TAG

  build-cli-images:
    name: CLI on PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    needs: build-php-images
    strategy:
      matrix:
        php: [ %%PHP_VERSION_LIST%% ]

    env:
      PHP_VERSION: ${{ matrix.php }}
      PHP_LATEST: '%%PHP_LATEST%%'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to the package registry
        run: |
          echo "$REGISTRY_PASSWORD" | docker login $PACKAGE_REGISTRY_HOST -u "$REGISTRY_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build --build-arg PACKAGE_REGISTRY=$PACKAGE_REGISTRY --build-arg PR_TAG=$PR_TAG -t $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG images/$PHP_VERSION/cli

      - name: Log Docker images
        run: docker images

      - name: Push Docker image
        run: docker push $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG

      - name: Push image as latest
        if: ${{ env.PHP_LATEST == env.PHP_VERSION }}
        run: |
          docker image tag $PACKAGE_REGISTRY/cli:$PHP_VERSION-fpm$PR_TAG $PACKAGE_REGISTRY/cli:latest$PR_TAG
          docker push $PACKAGE_REGISTRY/cli:latest$PR_TAG
